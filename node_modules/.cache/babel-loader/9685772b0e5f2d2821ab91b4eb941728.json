{"ast":null,"code":"import _regeneratorRuntime from \"/Users/joelburdorf/Prime/tier3/joel-solo-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loginUser),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logoutUser),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(loginSaga);\n\nimport { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios'; // worker Saga: will be fired on \"LOGIN\" actions\n\nfunction loginUser(action) {\n  var config;\n  return _regeneratorRuntime.wrap(function loginUser$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        _context.prev = 0;\n        _context.next = 3;\n        return put({\n          type: 'CLEAR_LOGIN_ERROR'\n        });\n\n      case 3:\n        config = {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          withCredentials: true\n        }; // send the action.payload as the body\n        // the config includes credentials which\n        // allow the server session to recognize the user\n\n        _context.next = 6;\n        return axios.post('/api/user/login', action.payload, config);\n\n      case 6:\n        _context.next = 8;\n        return put({\n          type: 'FETCH_USER'\n        });\n\n      case 8:\n        _context.next = 20;\n        break;\n\n      case 10:\n        _context.prev = 10;\n        _context.t0 = _context[\"catch\"](0);\n        console.log('Error with user login:', _context.t0);\n\n        if (!(_context.t0.response.status === 401)) {\n          _context.next = 18;\n          break;\n        }\n\n        _context.next = 16;\n        return put({\n          type: 'LOGIN_FAILED'\n        });\n\n      case 16:\n        _context.next = 20;\n        break;\n\n      case 18:\n        _context.next = 20;\n        return put({\n          type: 'LOGIN_FAILED_NO_CODE'\n        });\n\n      case 20:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _marked, null, [[0, 10]]);\n} // worker Saga: will be fired on \"LOGOUT\" actions\n\n\nfunction logoutUser(action) {\n  var config;\n  return _regeneratorRuntime.wrap(function logoutUser$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        _context2.prev = 0;\n        config = {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          withCredentials: true\n        }; // the config includes credentials which\n        // allow the server session to recognize the user\n        // when the server recognizes the user session\n        // it will end the session\n\n        _context2.next = 4;\n        return axios.post('/api/user/logout', config);\n\n      case 4:\n        _context2.next = 6;\n        return put({\n          type: 'UNSET_USER'\n        });\n\n      case 6:\n        _context2.next = 11;\n        break;\n\n      case 8:\n        _context2.prev = 8;\n        _context2.t0 = _context2[\"catch\"](0);\n        console.log('Error with user logout:', _context2.t0);\n\n      case 11:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction loginSaga() {\n  return _regeneratorRuntime.wrap(function loginSaga$(_context3) {\n    while (1) switch (_context3.prev = _context3.next) {\n      case 0:\n        _context3.next = 2;\n        return takeLatest('LOGIN', loginUser);\n\n      case 2:\n        _context3.next = 4;\n        return takeLatest('LOGOUT', logoutUser);\n\n      case 4:\n      case \"end\":\n        return _context3.stop();\n    }\n  }, _marked3);\n}\n\nexport default loginSaga;","map":{"version":3,"sources":["/Users/joelburdorf/Prime/tier3/joel-solo-project/src/redux/sagas/loginSaga.js"],"names":["loginUser","logoutUser","loginSaga","put","takeLatest","axios","action","type","config","headers","withCredentials","post","payload","console","log","response","status"],"mappings":";;oDAIUA,S;qDAkCAC,U;qDAuBAC,S;;AA7DV,SAASC,GAAT,EAAcC,UAAd,QAAgC,oBAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,SAAUL,SAAV,CAAoBM,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGI,eAAMH,GAAG,CAAC;AAAEI,UAAAA,IAAI,EAAE;AAAR,SAAD,CAAT;;AAHJ;AAKUC,QAAAA,MALV,GAKmB;AACbC,UAAAA,OAAO,EAAE;AAAE,4BAAgB;AAAlB,WADI;AAEbC,UAAAA,eAAe,EAAE;AAFJ,SALnB,EAUI;AACA;AACA;;AAZJ;AAaI,eAAML,KAAK,CAACM,IAAN,CAAW,iBAAX,EAA8BL,MAAM,CAACM,OAArC,EAA8CJ,MAA9C,CAAN;;AAbJ;AAAA;AAiBI,eAAML,GAAG,CAAC;AAACI,UAAAA,IAAI,EAAE;AAAP,SAAD,CAAT;;AAjBJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAmBIM,QAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;;AAnBJ,cAoBQ,YAAMC,QAAN,CAAeC,MAAf,KAA0B,GApBlC;AAAA;AAAA;AAAA;;AAAA;AAwBM,eAAMb,GAAG,CAAC;AAAEI,UAAAA,IAAI,EAAE;AAAR,SAAD,CAAT;;AAxBN;AAAA;AAAA;;AAAA;AAAA;AA4BM,eAAMJ,GAAG,CAAC;AAAEI,UAAAA,IAAI,EAAE;AAAR,SAAD,CAAT;;AA5BN;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAiCA;;;AACA,SAAUN,UAAV,CAAqBK,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEUE,QAAAA,MAFV,GAEmB;AACbC,UAAAA,OAAO,EAAE;AAAE,4BAAgB;AAAlB,WADI;AAEbC,UAAAA,eAAe,EAAE;AAFJ,SAFnB,EAOI;AACA;AACA;AACA;;AAVJ;AAWI,eAAML,KAAK,CAACM,IAAN,CAAW,kBAAX,EAA+BH,MAA/B,CAAN;;AAXJ;AAAA;AAgBI,eAAML,GAAG,CAAC;AAAEI,UAAAA,IAAI,EAAE;AAAR,SAAD,CAAT;;AAhBJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAmBIM,QAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;;AAnBJ;AAAA;AAAA;AAAA;AAAA;AAAA;;AAuBA,SAAUZ,SAAV;AAAA;AAAA;AAAA;AAAA;AACE,eAAME,UAAU,CAAC,OAAD,EAAUJ,SAAV,CAAhB;;AADF;AAAA;AAEE,eAAMI,UAAU,CAAC,QAAD,EAAWH,UAAX,CAAhB;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAeC,SAAf","sourcesContent":["import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"LOGIN\" actions\nfunction* loginUser(action) {\n  try {\n    // clear any existing error on the login page\n    yield put({ type: 'CLEAR_LOGIN_ERROR' });\n\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // send the action.payload as the body\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    yield axios.post('/api/user/login', action.payload, config);\n    \n    // after the user has logged in\n    // get the user information from the server\n    yield put({type: 'FETCH_USER'});\n  } catch (error) {\n    console.log('Error with user login:', error);\n    if (error.response.status === 401) {\n      // The 401 is the error status sent from passport\n      // if user isn't in the database or\n      // if the username and password don't match in the database\n      yield put({ type: 'LOGIN_FAILED' });\n    } else {\n      // Got an error that wasn't a 401\n      // Could be anything, but most common cause is the server is not started\n      yield put({ type: 'LOGIN_FAILED_NO_CODE' });\n    }\n  }\n}\n\n// worker Saga: will be fired on \"LOGOUT\" actions\nfunction* logoutUser(action) {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // when the server recognizes the user session\n    // it will end the session\n    yield axios.post('/api/user/logout', config);\n\n    // now that the session has ended on the server\n    // remove the client-side user object to let\n    // the client-side code know the user is logged out\n    yield put({ type: 'UNSET_USER' });\n\n  } catch (error) {\n    console.log('Error with user logout:', error);\n  }\n}\n\nfunction* loginSaga() {\n  yield takeLatest('LOGIN', loginUser);\n  yield takeLatest('LOGOUT', logoutUser);\n}\n\nexport default loginSaga;\n"]},"metadata":{},"sourceType":"module"}