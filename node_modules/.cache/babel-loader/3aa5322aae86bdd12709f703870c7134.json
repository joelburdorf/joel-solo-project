{"ast":null,"code":"import _objectWithoutProperties from \"/Users/joelburdorf/Prime/tier3/joel-solo-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/joelburdorf/Prime/tier3/joel-solo-project/src/components/ProtectedRoute/ProtectedRoute.js\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport LoginPage from '../LoginPage/LoginPage';\nimport RegisterPage from '../RegisterPage/RegisterPage'; // A Custom Wrapper Component -- This will keep our code DRY.\n// Responsible for watching redux state, and returning an appropriate component\n// API for this component is the same as a regular route\n// THIS IS NOT SECURITY! That must be done on the server\n// A malicious user could change the code and see any view\n// so your server-side route must implement real security\n// by checking req.isAuthenticated for authentication\n// and by checking req.user for authorization\n\nconst ProtectedRoute = props => {\n  // Using destructuring, this takes ComponentToProtect from component\n  // prop and grabs all other props to pass them along to Route\n  const ComponentToProtect = props.component,\n        user = props.user,\n        loginMode = props.loginMode,\n        otherProps = _objectWithoutProperties(props, [\"component\", \"user\", \"loginMode\"]);\n\n  let ComponentToShow;\n\n  if (user.id) {\n    // if the user is logged in (only logged in users have ids)\n    // show the component that is protected\n    ComponentToShow = ComponentToProtect;\n  } else if (loginMode === 'login') {\n    // if they are not logged in, check the loginMode on Redux State\n    // if the mode is 'login', show the LoginPage\n    ComponentToShow = LoginPage;\n  } else {\n    // the the user is not logged in and the mode is not 'login'\n    // show the RegisterPage\n    ComponentToShow = RegisterPage;\n  } // We return a Route component that gets added to our list of routes\n\n\n  return React.createElement(Route // all props like 'exact' and 'path' that were passed in\n  // are now passed along to the 'Route' Component\n  , Object.assign({}, otherProps, {\n    component: ComponentToShow,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }));\n}; // Instead of taking everything from state, we just want the user and loginMode\n// to determine which page we should show the user\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({ user, loginMode }) => ({ user, loginMode });\n\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user,\n    loginMode: state.loginMode\n  };\n};\n\nexport default connect(mapStateToProps)(ProtectedRoute);","map":{"version":3,"sources":["/Users/joelburdorf/Prime/tier3/joel-solo-project/src/components/ProtectedRoute/ProtectedRoute.js"],"names":["React","Route","connect","LoginPage","RegisterPage","ProtectedRoute","props","ComponentToProtect","component","user","loginMode","otherProps","ComponentToShow","id","mapStateToProps","state"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,QAAoB,kBAApB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,YAAP,MAAyB,8BAAzB,C,CAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,cAAc,GAAIC,KAAD,IAAW;AAChC;AACA;AAFgC,QAKnBC,kBALmB,GAS5BD,KAT4B,CAK9BE,SAL8B;AAAA,QAM9BC,IAN8B,GAS5BH,KAT4B,CAM9BG,IAN8B;AAAA,QAO9BC,SAP8B,GAS5BJ,KAT4B,CAO9BI,SAP8B;AAAA,QAQ3BC,UAR2B,4BAS5BL,KAT4B;;AAWhC,MAAIM,eAAJ;;AAEA,MAAGH,IAAI,CAACI,EAAR,EAAY;AACV;AACA;AACAD,IAAAA,eAAe,GAAGL,kBAAlB;AACD,GAJD,MAIO,IAAIG,SAAS,KAAK,OAAlB,EAA2B;AAChC;AACA;AACAE,IAAAA,eAAe,GAAGT,SAAlB;AACD,GAJM,MAIA;AACL;AACA;AACAS,IAAAA,eAAe,GAAGR,YAAlB;AACD,GAzB+B,CA2BhC;;;AACA,SACI,oBAAC,KAAD,CACE;AACA;AAFF,sBAGMO,UAHN;AAIE,IAAA,SAAS,EAAEC,eAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ;AAQD,CApCD,C,CAsCA;AACA;AACA;AACA;;;AACA,MAAME,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLN,IAAAA,IAAI,EAAEM,KAAK,CAACN,IADP;AAELC,IAAAA,SAAS,EAAEK,KAAK,CAACL;AAFZ,GAAP;AAID,CALD;;AAOA,eAAeR,OAAO,CAACY,eAAD,CAAP,CAAyBT,cAAzB,CAAf","sourcesContent":["import React from 'react';\nimport {Route} from 'react-router-dom'\nimport {connect} from 'react-redux';\nimport LoginPage from '../LoginPage/LoginPage';\nimport RegisterPage from '../RegisterPage/RegisterPage';\n\n// A Custom Wrapper Component -- This will keep our code DRY.\n// Responsible for watching redux state, and returning an appropriate component\n// API for this component is the same as a regular route\n\n// THIS IS NOT SECURITY! That must be done on the server\n// A malicious user could change the code and see any view\n// so your server-side route must implement real security\n// by checking req.isAuthenticated for authentication\n// and by checking req.user for authorization\n\nconst ProtectedRoute = (props) => {\n  // Using destructuring, this takes ComponentToProtect from component\n  // prop and grabs all other props to pass them along to Route\n  const {\n    // Alias prop 'component' as 'ComponentToProtect'\n    component: ComponentToProtect,\n    user,\n    loginMode,\n    ...otherProps\n  } = props;\n\n  let ComponentToShow;\n\n  if(user.id) {\n    // if the user is logged in (only logged in users have ids)\n    // show the component that is protected\n    ComponentToShow = ComponentToProtect;\n  } else if (loginMode === 'login') {\n    // if they are not logged in, check the loginMode on Redux State\n    // if the mode is 'login', show the LoginPage\n    ComponentToShow = LoginPage;\n  } else {\n    // the the user is not logged in and the mode is not 'login'\n    // show the RegisterPage\n    ComponentToShow = RegisterPage;\n  }\n\n  // We return a Route component that gets added to our list of routes\n  return (\n      <Route\n        // all props like 'exact' and 'path' that were passed in\n        // are now passed along to the 'Route' Component\n        {...otherProps}\n        component={ComponentToShow}\n      />\n  )\n}\n\n// Instead of taking everything from state, we just want the user and loginMode\n// to determine which page we should show the user\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({ user, loginMode }) => ({ user, loginMode });\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n    loginMode: state.loginMode,\n  }\n}\n\nexport default connect(mapStateToProps)(ProtectedRoute)\n\n\n"]},"metadata":{},"sourceType":"module"}