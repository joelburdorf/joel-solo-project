{"ast":null,"code":"import _regeneratorRuntime from \"/Users/joelburdorf/Prime/tier3/joel-solo-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(fetchUser),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects'; // worker Saga: will be fired on \"FETCH_USER\" actions\n\nfunction fetchUser() {\n  var config, response;\n  return _regeneratorRuntime.wrap(function fetchUser$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        _context.prev = 0;\n        config = {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          withCredentials: true\n        }; // the config includes credentials which\n        // allow the server session to recognize the user\n        // If a user is logged in, this will return their information\n        // from the server session (req.user)\n\n        _context.next = 4;\n        return axios.get('/api/user', config);\n\n      case 4:\n        response = _context.sent;\n        _context.next = 7;\n        return put({\n          type: 'SET_USER',\n          payload: response.data\n        });\n\n      case 7:\n        _context.next = 12;\n        break;\n\n      case 9:\n        _context.prev = 9;\n        _context.t0 = _context[\"catch\"](0);\n        console.log('User get request failed', _context.t0);\n\n      case 12:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\nfunction userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        _context2.next = 2;\n        return takeLatest('FETCH_USER', fetchUser);\n\n      case 2:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, _marked2);\n}\n\nexport default userSaga;","map":{"version":3,"sources":["/Users/joelburdorf/Prime/tier3/joel-solo-project/src/redux/sagas/userSaga.js"],"names":["fetchUser","userSaga","axios","put","takeLatest","config","headers","withCredentials","get","response","type","payload","data","console","log"],"mappings":";;oDAIUA,S;qDAsBAC,Q;;AA1BV,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,UAAd,QAAgC,oBAAhC,C,CAEA;;AACA,SAAUJ,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAEUK,QAAAA,MAFV,GAEmB;AACbC,UAAAA,OAAO,EAAE;AAAE,4BAAgB;AAAlB,WADI;AAEbC,UAAAA,eAAe,EAAE;AAFJ,SAFnB,EAOI;AACA;AACA;AACA;;AAVJ;AAWqB,eAAML,KAAK,CAACM,GAAN,CAAU,WAAV,EAAuBH,MAAvB,CAAN;;AAXrB;AAWUI,QAAAA,QAXV;AAAA;AAgBI,eAAMN,GAAG,CAAC;AAAEO,UAAAA,IAAI,EAAE,UAAR;AAAoBC,UAAAA,OAAO,EAAEF,QAAQ,CAACG;AAAtC,SAAD,CAAT;;AAhBJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAkBIC,QAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;;AAlBJ;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsBA,SAAUb,QAAV;AAAA;AAAA;AAAA;AAAA;AACE,eAAMG,UAAU,CAAC,YAAD,EAAeJ,SAAf,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAeC,QAAf","sourcesContent":["import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n// worker Saga: will be fired on \"FETCH_USER\" actions\nfunction* fetchUser() {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // If a user is logged in, this will return their information\n    // from the server session (req.user)\n    const response = yield axios.get('/api/user', config);\n\n    // now that the session has given us a user object\n    // with an id and username set the client-side user object to let\n    // the client-side code know the user is logged in\n    yield put({ type: 'SET_USER', payload: response.data });\n  } catch (error) {\n    console.log('User get request failed', error);\n  }\n}\n\nfunction* userSaga() {\n  yield takeLatest('FETCH_USER', fetchUser);\n}\n\nexport default userSaga;\n"]},"metadata":{},"sourceType":"module"}