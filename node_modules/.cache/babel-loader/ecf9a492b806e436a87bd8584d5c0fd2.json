{"ast":null,"code":"var _jsxFileName = \"/Users/joelburdorf/Prime/tier3/joel-solo-project/src/components/LoginPage/LoginPage.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass LoginPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      username: '',\n      password: ''\n    };\n\n    this.login = event => {\n      event.preventDefault();\n\n      if (this.state.username && this.state.password) {\n        this.props.dispatch({\n          type: 'LOGIN',\n          payload: {\n            username: this.state.username,\n            password: this.state.password\n          }\n        });\n      } else {\n        this.props.dispatch({\n          type: 'LOGIN_INPUT_ERROR'\n        });\n      }\n    };\n\n    this.handleInputChangeFor = propertyName => event => {\n      this.setState({\n        [propertyName]: event.target.value\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, this.props.errors.loginMessage && React.createElement(\"h2\", {\n      className: \"alert\",\n      role: \"alert\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, this.props.errors.loginMessage), React.createElement(\"form\", {\n      onSubmit: this.login,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"Login\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"Username:\", React.createElement(\"input\", {\n      type: \"text\",\n      name: \"username\",\n      value: this.state.username,\n      onChange: this.handleInputChangeFor('username'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Password:\", React.createElement(\"input\", {\n      type: \"password\",\n      name: \"password\",\n      value: this.state.password,\n      onChange: this.handleInputChangeFor('password'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      className: \"log-in\",\n      type: \"submit\",\n      name: \"submit\",\n      value: \"Log In\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }))), React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      className: \"link-button\",\n      onClick: () => {\n        this.props.dispatch({\n          type: 'SET_TO_REGISTER_MODE'\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Register\")));\n  }\n\n} // Instead of taking everything from state, we just want the error messages.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({errors}) => ({ errors });\n\n\nconst mapStateToProps = state => ({\n  errors: state.errors\n});\n\nexport default connect(mapStateToProps)(LoginPage);","map":{"version":3,"sources":["/Users/joelburdorf/Prime/tier3/joel-solo-project/src/components/LoginPage/LoginPage.js"],"names":["React","Component","connect","LoginPage","state","username","password","login","event","preventDefault","props","dispatch","type","payload","handleInputChangeFor","propertyName","setState","target","value","render","errors","loginMessage","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass LoginPage extends Component {\n  state = {\n    username: '',\n    password: '',\n  };\n\n  login = (event) => {\n    event.preventDefault();\n\n    if (this.state.username && this.state.password) {\n      this.props.dispatch({\n        type: 'LOGIN',\n        payload: {\n          username: this.state.username,\n          password: this.state.password,\n        },\n      });\n    } else {\n      this.props.dispatch({ type: 'LOGIN_INPUT_ERROR' });\n    }\n  } // end login\n\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        {this.props.errors.loginMessage && (\n          <h2\n            className=\"alert\"\n            role=\"alert\"\n          >\n            {this.props.errors.loginMessage}\n          </h2>\n        )}\n        <form onSubmit={this.login}>\n          <h1>Login</h1>\n          <div>\n            <label htmlFor=\"username\">\n              Username:\n              <input\n                type=\"text\"\n                name=\"username\"\n                value={this.state.username}\n                onChange={this.handleInputChangeFor('username')}\n              />\n            </label>\n          </div>\n          <div>\n            <label htmlFor=\"password\">\n              Password:\n              <input\n                type=\"password\"\n                name=\"password\"\n                value={this.state.password}\n                onChange={this.handleInputChangeFor('password')}\n              />\n            </label>\n          </div>\n          <div>\n            <input\n              className=\"log-in\"\n              type=\"submit\"\n              name=\"submit\"\n              value=\"Log In\"\n            />\n          </div>\n        </form>\n        <center>\n          <button\n            type=\"button\"\n            className=\"link-button\"\n            onClick={() => {this.props.dispatch({type: 'SET_TO_REGISTER_MODE'})}}\n          >\n            Register\n          </button>\n        </center>\n      </div>\n    );\n  }\n}\n\n// Instead of taking everything from state, we just want the error messages.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({errors}) => ({ errors });\nconst mapStateToProps = state => ({\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps)(LoginPage);\n"]},"metadata":{},"sourceType":"module"}